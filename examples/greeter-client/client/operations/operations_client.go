// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
Echo echos back the message

Echo back the message
*/
func (a *Client) Echo(params *EchoParams) (*EchoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEchoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "echo",
		Method:             "POST",
		PathPattern:        "/v1/echo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EchoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EchoOK), nil

}

/*
GetGreetStatus shows when the person was greeted last

Show when the person was last greeted
*/
func (a *Client) GetGreetStatus(params *GetGreetStatusParams) (*GetGreetStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGreetStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGreetStatus",
		Method:             "GET",
		PathPattern:        "/v1/greet/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetGreetStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGreetStatusOK), nil

}

/*
GetGreetSummary shows who has been greeted

Show who has been greeted
*/
func (a *Client) GetGreetSummary(params *GetGreetSummaryParams) (*GetGreetSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGreetSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGreetSummary",
		Method:             "GET",
		PathPattern:        "/v1/greet",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetGreetSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGreetSummaryOK), nil

}

/*
Greet greets someone

Greet someone
*/
func (a *Client) Greet(params *GreetParams) (*GreetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGreetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "greet",
		Method:             "POST",
		PathPattern:        "/v1/greet/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GreetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GreetOK), nil

}

/*
Ping pings the greeter service

Ping the greeter service
*/
func (a *Client) Ping(params *PingParams) (*PingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ping",
		Method:             "GET",
		PathPattern:        "/v1/ping",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PingOK), nil

}

/*
Subscribe subscribers to the greeting events

Subscribe to the greeteing events
*/
func (a *Client) Subscribe(params *SubscribeParams) (*SubscribeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscribeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "subscribe",
		Method:             "GET",
		PathPattern:        "/v1/subscribe/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SubscribeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SubscribeOK), nil

}

/*
Unsubscribe unsubscribers from the greeting events

Unsubscribe from the greeting events
*/
func (a *Client) Unsubscribe(params *UnsubscribeParams) (*UnsubscribeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnsubscribeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unsubscribe",
		Method:             "DELETE",
		PathPattern:        "/v1/unsubscribe/{sid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UnsubscribeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UnsubscribeOK), nil

}

/*
Upload uploads a greeting card

Upload a greeting card
*/
func (a *Client) Upload(params *UploadParams) (*UploadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUploadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "upload",
		Method:             "POST",
		PathPattern:        "/v1/greet/{name}/upload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UploadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UploadOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
